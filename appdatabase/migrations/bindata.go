// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 0001_app.down.sql (291B)
// 0001_app.up.sql (2.349kB)
// doc.go (74B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_appDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\xbd\x0e\xc2\x30\x0c\x04\xe0\xbd\x4f\xd1\xf7\xe8\x04\x6a\x07\x24\x04\x08\x31\xb0\x59\x21\x31\xad\x45\x1b\x07\xdb\xe5\xe7\xed\x59\xb1\x28\xeb\x77\xa7\xd3\xb5\xc7\xfd\xa1\x3e\xad\xd6\xdb\xae\x56\x34\xa3\xdc\x6b\x53\x7d\x61\x88\x91\xe7\x6c\x1e\x2f\xc2\x4f\x45\x59\x46\x18\x48\x8d\xe5\xed\xc2\x14\x4a\xf1\xf5\x82\x32\x91\x2a\x71\xf6\x6e\x12\xb2\x5e\x7f\xc6\x47\x8e\xb7\xe5\x67\x60\x0c\x2e\xde\xec\xda\xee\x5c\x4f\x81\x46\x45\x79\xa0\x80\xe0\x7d\x46\x35\xe8\x43\x51\x88\x43\x30\xa0\x04\x94\x5e\x6e\xee\x4f\xbf\xa9\xaa\x4f\x00\x00\x00\xff\xff\x9f\xb7\xe5\x86\x23\x01\x00\x00")

func _0001_appDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_appDownSql,
		"0001_app.down.sql",
	)
}

func _0001_appDownSql() (*asset, error) {
	bytes, err := _0001_appDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_app.down.sql", size: 291, mode: os.FileMode(0644), modTime: time.Unix(1567494505, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0x1, 0x47, 0xc5, 0xac, 0xd5, 0x7b, 0x85, 0xb8, 0xa8, 0x5d, 0x12, 0xe, 0x60, 0xd1, 0xeb, 0xb7, 0x4c, 0x5c, 0xd6, 0xc9, 0xf3, 0xbe, 0xfd, 0x84, 0x4f, 0xf3, 0x7a, 0x4e, 0x52, 0x76, 0x6c}}
	return a, nil
}

var __0001_appUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xcd\x72\x9b\x30\x18\xbc\xeb\x29\xbe\xa3\x3d\xc3\x1b\xe4\x84\x6d\xd9\x61\x4a\xa1\xe5\xa7\x49\x4e\x1a\x19\x64\x9b\x31\x7f\x91\x44\x12\xbf\x7d\x47\x80\x00\x3b\x80\xeb\xe9\x0d\x49\xab\x65\x77\xf5\xe9\xd3\xda\xc3\x66\x80\x21\x30\x57\x36\x06\x6b\x0b\x8e\x1b\x00\x7e\xb5\xfc\xc0\x07\xc1\xa4\x4c\xf2\xa3\x80\x05\x92\x97\x92\xc1\x1f\xd3\x5b\x3f\x9b\x1e\xfc\xf2\xac\x9f\xa6\xf7\x06\x3f\xf0\x9b\x81\x3e\x68\x5a\x31\x58\xd9\xee\x0a\x2d\xe1\xc5\x0a\x9e\xdd\x30\x00\xcf\x7d\xb1\x36\x4f\x08\xcd\x90\xd3\x28\x2a\xaa\x5c\x2a\x72\x1a\xc7\x9c\x09\x31\xce\xff\x49\xd3\x94\x49\x58\xb9\xae\x8d\x4d\xc7\x40\xd1\x89\x0e\x46\xb5\xae\x00\xbf\x06\x06\x12\xb2\xe0\xf4\xa8\x47\x65\xb5\x3f\xb3\x4b\xad\xcb\x40\x25\x95\xa7\x76\x3e\xa7\x99\x86\x44\x45\x5a\xf0\xfa\x7b\x5a\x79\xe8\x58\xbf\x43\x0c\x96\xb3\xc1\xaf\x50\xe5\xc9\x7b\xc5\x48\xa3\x88\x68\xd5\xae\x33\xf0\xd2\xac\x2d\xe1\xe5\x19\x7b\xb8\x1b\x3e\xcd\xd1\x29\x43\xe3\x64\x6a\xa5\xa3\xaa\x07\xf3\x91\xee\x79\xf1\x29\x18\x57\x91\x26\x71\x6d\xec\x3a\xca\xce\x7b\xbd\xc9\x09\x6d\xdb\x40\x32\xc9\x98\x90\x34\x2b\x21\xf4\x77\xd6\xce\xc1\x1b\x58\x59\x3b\xcb\x09\x0c\x14\xd3\xb2\xd4\x49\xc3\x06\x6f\xcd\xd0\x0e\xe0\x40\x53\xc1\x0c\x74\x4a\x54\xdc\x17\x2b\x8f\xd9\x17\x84\x8e\xdf\xec\xb4\x9c\x99\x28\xe7\x14\x93\x96\x0f\x16\xa8\x9d\x22\xda\x41\x2f\x55\x63\x9a\xd3\xdb\xba\x1e\xb6\x76\x8e\x72\xb6\xe8\xf7\x2c\xc1\xc3\x5b\xec\x61\x67\x8d\x7b\xf6\x85\x9a\x77\x95\x07\x1b\x07\x18\xd6\xa6\xbf\x36\x37\x18\xdd\x49\x53\xd9\x57\x51\xf6\xa9\x0d\xc2\x7c\xcc\x66\xc9\x78\x96\x08\x91\x14\xb9\x22\x54\xc4\x64\xec\x2c\x7a\xd8\xed\xca\xd0\x6c\xb7\xfd\xca\x6b\xad\x76\xd1\x4c\x8f\x5b\x9d\x13\x28\x39\xcd\xc5\xa1\x29\x9d\x9c\xc9\xcf\x82\x9f\xd5\x01\x74\x07\xdb\x94\xc4\xf0\x2c\xa8\x38\x75\xf7\xb5\x9f\xbe\xbd\xc9\xfd\xca\x3e\x3d\x93\x89\x4d\xf2\xab\xbd\xa6\x82\xe5\x31\xe3\x23\x08\xce\x22\x96\x94\xb2\x85\xa5\xc5\xb1\xfd\xba\xea\x4a\xe3\x69\xf5\x6e\x0c\x2d\xe1\xba\x46\xd2\x22\x3a\x8b\x21\xac\x81\x7c\xcb\xd0\x40\x6b\xd7\xf1\x03\xcf\x54\x41\xb4\x57\x57\xc7\x46\x4a\xc6\xf5\x15\xae\xbf\x5b\x3a\x7d\xdf\x17\x8a\xd3\x68\x01\x46\xff\xaf\xe5\xbd\x1a\x6c\xd4\xfd\xe7\xa1\xe4\x55\xb6\x67\xfc\x3b\x7c\x70\xf5\xa7\x29\x19\x8d\xeb\x1e\xd0\x35\x80\xad\x69\xfb\xa3\x61\xd4\x5a\x47\xdd\xdf\x86\x3b\xb9\xb9\x51\x7a\x8f\xa3\x41\xdd\xcd\x4e\xf7\x51\x22\x0b\xf2\x58\x8e\xf3\x55\x3c\x15\xa7\xb8\xe4\x11\xd4\x8d\x73\xa6\xfe\x5a\xed\xf3\x15\xa8\x41\xff\x54\x83\x19\x2d\xcb\x24\x3f\x92\x43\xc1\x49\x6b\xb9\x73\x3c\x9a\xa4\x2e\xc3\x5e\xce\x23\x15\x99\xd1\x24\x15\x8c\x7f\x30\x4e\x38\x7b\xaf\x98\x90\xe4\x48\xeb\x3e\x09\x70\xa4\x25\x39\xf0\x22\xbb\x7a\x10\xf0\x0e\x0f\x13\x6c\x50\xb2\x98\xc7\x8c\x3e\x5f\x00\xf5\x53\x79\xfb\x30\x20\x80\xc9\x66\xdc\x3c\xb4\x13\x9a\x49\x4b\x47\x92\xf8\x4b\x65\x3d\x69\xad\xc5\x2d\x9f\xd0\xdf\x00\x00\x00\xff\xff\xa4\x19\x21\xb1\x2d\x09\x00\x00")

func _0001_appUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_appUpSql,
		"0001_app.up.sql",
	)
}

func _0001_appUpSql() (*asset, error) {
	bytes, err := _0001_appUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_app.up.sql", size: 2349, mode: os.FileMode(0644), modTime: time.Unix(1567498980, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfa, 0x22, 0x29, 0x51, 0x3, 0xba, 0x54, 0x7e, 0x4f, 0x65, 0xba, 0x7f, 0xa4, 0xc5, 0xb7, 0x94, 0x5b, 0xf8, 0x14, 0x73, 0x81, 0x6, 0x6e, 0xca, 0xfd, 0x68, 0x82, 0x9, 0x8e, 0x57, 0xc4, 0xe9}}
	return a, nil
}

var _docGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x0d\xc4\x20\x0c\x05\xd0\x9e\x29\xfe\x02\xd8\xfd\x6d\xe3\x4b\xac\x2f\x44\x82\x09\x78\x7f\xa5\x49\xfd\xa6\x1d\xdd\xe8\xd8\xcf\x55\x8a\x2a\xe3\x47\x1f\xbe\x2c\x1d\x8c\xfa\x6f\xe3\xb4\x34\xd4\xd9\x89\xbb\x71\x59\xb6\x18\x1b\x35\x20\xa2\x9f\x0a\x03\xa2\xe5\x0d\x00\x00\xff\xff\x60\xcd\x06\xbe\x4a\x00\x00\x00")

func docGoBytes() ([]byte, error) {
	return bindataRead(
		_docGo,
		"doc.go",
	)
}

func docGo() (*asset, error) {
	bytes, err := docGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc.go", size: 74, mode: os.FileMode(0644), modTime: time.Unix(1566455715, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x7c, 0x28, 0xcd, 0x47, 0xf2, 0xfa, 0x7c, 0x51, 0x2d, 0xd8, 0x38, 0xb, 0xb0, 0x34, 0x9d, 0x4c, 0x62, 0xa, 0x9e, 0x28, 0xc3, 0x31, 0x23, 0xd9, 0xbb, 0x89, 0x9f, 0xa0, 0x89, 0x1f, 0xe8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_app.down.sql": _0001_appDownSql,

	"0001_app.up.sql": _0001_appUpSql,

	"doc.go": docGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0001_app.down.sql": &bintree{_0001_appDownSql, map[string]*bintree{}},
	"0001_app.up.sql":   &bintree{_0001_appUpSql, map[string]*bintree{}},
	"doc.go":            &bintree{docGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
